package 构造方法;
/**
 *  	一、  静态代码块
 * 随着类的加载而加载，并且只被加载一次，一般用于项目的初始化static{…}
 * 1、	静态代码块：在类加载时就加载，并且只被加载一次，一般用于项目的初始化
 * 2、	构造代码块：在调用构造方法前会自动调用，每次创建对象都会被调用
 * 3、	局部代码块：方法里的代码块，方法被调用时才会执行
 * 4、	静态代码块：static{   }，位置：在类里方法外
 * 5、	TODO创建测试类，类中写好静态代码块，构造代码块，构造方法，普通方法里嵌套局部代码块。测试他们的执行顺序。
 * 6、	静态 - 构造代码块 - 构造方法 - 局部
 * 	    二、 构造代码块
 * 1、	在类的内部，方法外部，的代码块。
 * 2、	通常用于抽取构造方法中的共性代码。
 * 3、	每次调用构造方法前都会调用构造代码块
 * 4、	优先于构造方法加载
 *  三、局部代码块 
 * 1、	在方法里面的代码块
 * 2、	通常用于控制变量的作用范围，出了括号就失效
 * 3、	变量的范围越小越好，成员变量会有线程安全问题
 * 4、	总结：执行顺序：静态 - 构造代码块-局部代码块顺序执行
 */
public class DaiMaXunXu  //只能有一个public class，但是可以有多个class
{
	public static void main(String[] args) 
	{
		Student s = new Student();
		s.init();
	}
}

class Student
{  int a=0;
	{
		System.out.println("构造代码块1");
	
	}
	public void init()
	{
		{
			System.out.println("局部代码块");
		}
	}
	
	{
		System.out.println("构造代码块2");
	}

}
